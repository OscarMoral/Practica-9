---
import Layout from '../layouts/Layout.astro';
import FeaturedCoursesSlider from '../components/FeaturedCoursesSlider';
import CourseCard from '../components/CourseCard';
import AppContent from '../components/AppContent';
import { db } from '../firebase/config';
import { ref, get } from 'firebase/database';
import type { Course } from '../types/course';
import CartWrapper from '../components/CartWrapper';
import PrecioDinamico from '../components/PrecioDinamico';
import CurrencySelector from '../components/CurrencySelector';

// Obtener los cursos desde Firebase
let courses: Course[] = [];
let error = null;

try {
	if (!db) {
		throw new Error('La base de datos no está inicializada correctamente');
	}
	
	const coursesRef = ref(db, 'courses');
	const snapshot = await get(coursesRef);
	
	if (snapshot.exists()) {
		courses = Object.values(snapshot.val());
	} else {
		console.log('No hay cursos disponibles');
	}
} catch (err) {
	console.error('Error al obtener los cursos:', err);
	error = err instanceof Error ? err.message : 'Error desconocido';
}

// Obtener categorías únicas
const categories = Array.from(new Set(courses.map(course => course.category)));

// Welcome to Astro! Wondering what to do next? Check out the Astro documentation at https://docs.astro.build
// Don't want to use any of this? Delete everything in this file, the `assets`, `components`, and `layouts` directories, and start fresh.
---

<Layout title="Plataforma de Cursos Online">
	<CartWrapper client:load>
		<main class="container mx-auto px-4 max-w-7xl">
			<!-- Sección de Bienvenida con Selector de Moneda -->
			<section class="py-12 mb-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl shadow-sm">
				<div class="max-w-6xl mx-auto px-6">
					<div class="flex justify-between items-center">
						<div class="text-left">
							<h1 class="text-5xl font-bold text-gray-900 mb-4">
								Bienvenido a tu <span class="text-blue-600">Plataforma de Aprendizaje</span>
							</h1>
							<p class="text-lg text-gray-600 max-w-2xl">
								Descubre una amplia variedad de cursos diseñados para impulsar tu carrera profesional
							</p>
						</div>
						<CurrencySelector client:load />
					</div>
				</div>
			</section>

			<!-- Mostrar error si hay problemas al obtener los cursos -->
			{error && (
				<div class="bg-red-50 border-l-4 border-red-400 p-4 mb-8 rounded-lg" role="alert">
					<div class="flex">
						<div class="flex-shrink-0">
							<svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
							</svg>
						</div>
						<div class="ml-3">
							<p class="text-sm text-red-700">{error}</p>
						</div>
					</div>
				</div>
			)}

			<!-- Hero Section -->
			<section class="py-8 mb-12">
				<FeaturedCoursesSlider client:only="react" courses={courses} />
			</section>

			<!-- Categorías -->
			<section class="py-8 mb-12">
				<h2 class="text-3xl font-bold mb-6 text-gray-900">Explora por Categorías</h2>
				<div class="flex gap-4 overflow-x-auto pb-4 scrollbar-thin">
					<button 
						class="category-btn px-6 py-3 rounded-full transition-all duration-300 bg-blue-600 text-white hover:shadow-lg transform hover:-translate-y-0.5" 
						data-category="Todos"
					>
						Todos los Cursos
					</button>
					{categories.map(category => (
						<button 
							class="category-btn px-6 py-3 bg-white border-2 border-blue-200 text-blue-700 rounded-full transition-all duration-300 hover:bg-blue-50 hover:border-blue-300 hover:shadow-lg transform hover:-translate-y-0.5" 
							data-category={category}
						>
							{category}
						</button>
					))}
				</div>
			</section>

			<!-- Buscador -->
			<section class="py-8 mb-12">
				<div class="relative max-w-2xl mx-auto">
					<input
						type="text"
						placeholder="Buscar cursos..."
						class="w-full px-6 py-4 text-lg border-2 border-gray-200 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 pl-14"
					/>
					<svg class="absolute left-5 top-1/2 transform -translate-y-1/2 h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
					</svg>
				</div>
			</section>

			<!-- Listado de Cursos -->
			<section class="py-8">
				<h2 class="text-3xl font-bold mb-8 text-gray-900">Cursos Disponibles</h2>
				<div class="grid grid-cols-3 gap-8" id="coursesGrid">
					{courses.map(course => (
						<div class="course-card transform transition-all duration-300" data-category={course.category}>
							<CourseCard client:load course={course} />
						</div>
					))}
				</div>
			</section>
		</main>
	</CartWrapper>
</Layout>

<style>
	.animate-fade-in {
		animation: fadeIn 0.3s ease-out forwards;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.category-btn {
		white-space: nowrap;
	}

	/* Estilizar la barra de desplazamiento horizontal */
	.overflow-x-auto {
		scrollbar-width: thin;
		scrollbar-color: #93C5FD transparent;
	}

	.overflow-x-auto::-webkit-scrollbar {
		height: 6px;
	}

	.overflow-x-auto::-webkit-scrollbar-track {
		background: transparent;
	}

	.overflow-x-auto::-webkit-scrollbar-thumb {
		background-color: #93C5FD;
		border-radius: 3px;
	}

	.course-card {
		opacity: 1;
		transform: translateY(0);
		transition: all 0.3s ease-in-out;
	}

	.course-card:hover {
		transform: translateY(-4px);
	}
</style>

<script>
	// Manejar la búsqueda y filtrado de cursos
	const searchInput = document.querySelector('input[type="text"]');
	const courseCards = document.querySelectorAll('.course-card');
	const categoryButtons = document.querySelectorAll('.category-btn');
	const coursesGrid = document.getElementById('coursesGrid');

	let currentCategory = 'Todos';
	let searchTerm = '';

	function updateActiveButton(selectedCategory: string) {
		categoryButtons.forEach(button => {
			if (button instanceof HTMLElement) {
				const isSelected = button.dataset.category === selectedCategory;
				button.classList.toggle('bg-blue-600', isSelected);
				button.classList.toggle('text-white', isSelected);
				button.classList.toggle('bg-blue-100', !isSelected);
				button.classList.toggle('text-blue-700', !isSelected);
			}
		});
	}

	function filterCourses() {
		let visibleCount = 0;

		// Ocultar todas las tarjetas primero con una transición
		courseCards.forEach(card => {
			if (!(card instanceof HTMLElement)) return;
			card.style.opacity = '0';
			card.style.transform = 'translateY(10px)';
		});

		// Esperar un momento para la transición de ocultamiento
		setTimeout(() => {
			courseCards.forEach(card => {
				if (!(card instanceof HTMLElement)) return;

				const category = card.dataset.category || '';
				const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
				
				// Filtrado más estricto por categoría
				const matchesCategory = currentCategory === 'Todos' || category === currentCategory;
				const matchesSearch = searchTerm === '' || title.includes(searchTerm.toLowerCase());
				
				const shouldShow = matchesCategory && matchesSearch;
				
				// Aplicar display none/block
				card.style.display = shouldShow ? 'block' : 'none';
				
				// Si se debe mostrar, aplicar la animación de entrada
				if (shouldShow) {
					visibleCount++;
					setTimeout(() => {
						card.style.opacity = '1';
						card.style.transform = 'translateY(0)';
					}, 50);
				}
			});

			// Actualizar mensaje de no resultados
			let noResultsMessage = document.getElementById('noResultsMessage');
			if (visibleCount === 0) {
				if (!noResultsMessage) {
					noResultsMessage = document.createElement('div');
					noResultsMessage.id = 'noResultsMessage';
					noResultsMessage.className = 'text-center py-8 text-gray-500 animate-fade-in';
					noResultsMessage.innerHTML = `
						<p class="text-xl mb-2">No se encontraron cursos en la categoría "${currentCategory}"</p>
						<p>Selecciona otra categoría o prueba con diferentes términos de búsqueda</p>
					`;
					coursesGrid?.parentNode?.insertBefore(noResultsMessage, coursesGrid.nextSibling);
				}
			} else if (noResultsMessage) {
				noResultsMessage.remove();
			}
		}, 150);
	}

	searchInput?.addEventListener('input', (e) => {
		if (e.target instanceof HTMLInputElement) {
			searchTerm = e.target.value;
			filterCourses();
		}
	});

	categoryButtons.forEach(button => {
		button.addEventListener('click', () => {
			if (button instanceof HTMLElement && button.dataset.category) {
				currentCategory = button.dataset.category;
				updateActiveButton(currentCategory);
				filterCourses();
			}
		});
	});

	// Inicializar el filtrado
	updateActiveButton(currentCategory);
	filterCourses();
</script>
